<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">

<title>Site Dashboard</title>
<style>
    html, body { height: 100%; margin: 0; }
    body {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem;
    }
    .container { max-width: 600px; width:100%; }
</style>
</head>
<body>

    <canvas id="usage_chart" style="width:100%;max-width:700px"></canvas>

    <div class="container">
        <h1>Site Usage</h1>
        <button onclick="sendMessage()">Send splish</button>
    </div>
    <div class="site_data_test">
        <p id="testt"></p>
    </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>

    <script>

        let usageChart;    

        window.addEventListener('DOMContentLoaded', () => {
            usageChart = new Chart("usage_chart", {
            type: "line",
            data: {
                labels: [],                
                    datasets: [{
                    backgroundColor:"rgba(67, 56, 202, 0)",
                    borderColor: "rgba(67, 56, 202, 0.6)",
                    data: []                  
                }]
            },
            options: {}
            });
        });

        const socket = new WebSocket('ws://192.168.1.213:1212');
        socket.onmessage = function (event) {
            const site_data_obj = JSON.parse(event.data);

            document.getElementById("testt").innerHTML =
            site_data_obj.data.map(row => `
                <div class="row">
                <strong>${row.username}</strong>
                (Request #${row.request_id}, approved: ${row.approved}, date: ${formatDate(row.req_date_time)[2]})
                </div>
            `).join("");

            //reformat the year
            const newLabels = [...new Set(site_data_obj.data.map(
                r => `${formatDate(r.req_date_time)[1]}/${formatDate(r.req_date_time)[2]}/${formatDate(r.req_date_time)[0]}`
            ))];
            
            const reqNumDict = {};

            site_data_obj.data.forEach(r => {
            const key = formatDate(r.req_date_time)[2];
            // if this date hasnâ€™t been seen yet, start at 0, then add 1
            reqNumDict[key] = (reqNumDict[key] || 0) + 1;
            });
            console.log(reqNumDict);

            const req_num_array = Object.values(reqNumDict);
            console.log(req_num_array);
            
            usageChart.data.datasets[0].data = req_num_array;
            usageChart.data.labels = newLabels;
            usageChart.update();
        };

        socket.onopen = function (event) {
            //alert('You are Connected to WebSocket Server');
        };

        /*
        socket.onmessage = function (event) {
            console.log(event.data);
            const site_data_obj = JSON.parse(event.data);

            const html = site_data_obj.data
            .map(row => `
                <div class="row">
                <strong>${row.username}</strong>
                (Request #${row.request_id}, approved: ${row.approved})
                </div>
            `)
            .join("");

            document.getElementById("testt").innerHTML = html;

            const timestamps = site_data_obj.data.map(row => row.req_date_time);
            xValues = timestamps;
            
            console.log(timestamps);

        };
        */

        

        socket.onclose = function (event) {
            console.log('Disconnected from WebSocket server');
        };

        function formatDate(unixTimestamp) {
            const date = new Date(unixTimestamp * 1000);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0'); 
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');

            return [year, month, day, hours, minutes, seconds]
            //return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
        }

        const unixTime = 1759989600; 
        const formattedDate = formatDate(unixTime);
        console.log(formattedDate); 

        function sendMessage() {
            const message = "get_chart_data";
            socket.send(message);
        }
    window.sendMessage = sendMessage

    </script>
</body>
</html>
