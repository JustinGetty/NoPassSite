<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bastion Auth | Sign In</title>
  <script src="https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/build/sha256.min.js"></script>
  <style>
    :root {
      --purple: #6d28d9;
      --purple-light: #8b5cf6;
      --purple-dark: #5b21b6;
      --purple-transparent: rgba(109, 40, 217, 0.1);
      --black: #171717;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --white: #ffffff;
      --red: #ef4444;
      --green: #10b981;
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --transition: all 0.2s ease;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }
    
    body {
      background-color: var(--gray-100);
      color: var(--black);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .modern-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 24px 32px;
      background-color: var(--white);
      box-shadow: var(--shadow-sm);
      position: relative;
      z-index: 10;
    }
    
    .logo-container {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .logo-container img {
      height: 32px;
      width: auto;
    }
    
    .brand-name {
      font-size: 18px;
      font-weight: 600;
      color: var(--black);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
    }
    
    .back-button {
      background: transparent;
      border: none;
      color: var(--gray-600);
      font-size: 15px;
      font-weight: 500;
      cursor: pointer;
      padding: 8px 16px;
      border-radius: 8px;
      transition: var(--transition);
    }
    
    .back-button:hover {
      background-color: var(--gray-200);
      color: var(--black);
    }
    
    .main-container {
      max-width: 480px;
      width: 100%;
      margin: 0 auto;
      padding: 40px 24px;
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    
    .welcome-container {
      text-align: center;
      margin-bottom: 36px;
    }
    
    .welcome-subtitle {
      font-size: 14px;
      font-weight: 500;
      color: var(--purple);
      text-transform: uppercase;
      letter-spacing: 1px;
      margin-bottom: 12px;
    }
    
    .welcome-container h1 {
      font-size: 32px;
      font-weight: 700;
      color: var(--black);
      margin-bottom: 12px;
    }
    
    .welcome-description {
      font-size: 16px;
      color: var(--gray-600);
      line-height: 1.5;
      max-width: 380px;
      margin: 0 auto;
    }
    
    .signin-form {
      background-color: var(--white);
      border-radius: 16px;
      padding: 32px;
      box-shadow: var(--shadow);
      width: 100%;
    }
    
    .form-group {
      margin-bottom: 24px;
    }
    
    .form-group label {
      display: block;
      font-size: 14px;
      font-weight: 500;
      color: var(--gray-700);
      margin-bottom: 8px;
    }
    
    .form-group input {
      width: 100%;
      padding: 12px 16px;
      font-size: 16px;
      border-radius: 8px;
      border: 1px solid var(--gray-300);
      background-color: var(--white);
      color: var(--black);
      transition: var(--transition);
    }
    
    .form-group input:focus {
      outline: none;
      border-color: var(--purple);
      box-shadow: 0 0 0 3px var(--purple-transparent);
    }
    
    .form-group input::placeholder {
      color: var(--gray-400);
    }
    
    .signin-button {
      width: 100%;
      background-color: var(--purple);
      color: var(--white);
      font-size: 16px;
      font-weight: 500;
      padding: 14px 24px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: var(--transition);
      box-shadow: var(--shadow-sm);
    }
    
    .signin-button:hover {
      background-color: var(--purple-dark);
      box-shadow: var(--shadow);
      transform: translateY(-1px);
    }
    
    .signin-button:active {
      transform: translateY(0);
      box-shadow: var(--shadow-sm);
    }
    
    #waitingScreen {
      display: none;
      margin-top: 20px;
      text-align: center;
      align-items: center;
      flex-direction: column;
    }
    
    .shield-container {
      position: relative;
      width: 80px;
      height: 80px;
      margin-bottom: 20px;
    }
    
    .shield {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      fill: var(--purple);
      animation: float 3s ease-in-out infinite;
    }
    
    .shield-pulse {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      fill: var(--purple);
      opacity: 0.3;
      transform-origin: center;
      animation: pulse 2s ease-in-out infinite;
    }
    
    .checkmark {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      stroke: white;
      stroke-width: 4;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-dasharray: 100;
      stroke-dashoffset: 100;
      animation: dash 1.5s ease-in-out infinite alternate;
    }
    
    .dots {
      display: flex;
      justify-content: center;
      margin: 10px 0;
    }
    
    .dot {
      width: 8px;
      height: 8px;
      margin: 0 4px;
      border-radius: 50%;
      background-color: var(--purple);
      animation: dot-fade 1.5s ease-in-out infinite;
    }
    
    .dot:nth-child(2) { animation-delay: 0.5s; }
    .dot:nth-child(3) { animation-delay: 1s; }
    
    #approveText {
      font-size: 18px;
      font-weight: 600;
      margin-top: 8px;
      color: var(--black);
    }
    
    #appInstructions {
      font-size: 14px;
      margin-top: 8px;
      color: var(--gray-500);
      max-width: 300px;
      line-height: 1.5;
    }
    
    .create-account-link {
      margin-top: 24px;
      text-align: center;
      font-size: 14px;
      color: var(--gray-600);
    }
    
    .create-account-link a {
      color: var(--purple);
      text-decoration: none;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .create-account-link a:hover {
      color: var(--purple-dark);
      text-decoration: underline;
    }
    
    #createAccountScreen {
      display: none;
      flex-direction: column;
      align-items: center;
      text-align: center;
      margin-top: 20px;
    }
    
    #createAccountScreen h2 {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 12px;
      color: var(--black);
    }
    
    #createAccountScreen p {
      font-size: 16px;
      color: var(--gray-600);
      line-height: 1.5;
      margin-bottom: 24px;
      max-width: 320px;
    }
    
    .qr-code {
      width: 200px;
      height: 200px;
      margin: 24px 0;
      padding: 16px;
      background-color: var(--white);
      border-radius: 16px;
      box-shadow: var(--shadow);
    }
    
    #statusMessage {
      display: none;
      padding: 12px 16px;
      margin-top: 16px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      text-align: center;
    }
    
    .status-error {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--red);
      border: 1px solid rgba(239, 68, 68, 0.2);
    }
    
    .status-success {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--green);
      border: 1px solid rgba(16, 185, 129, 0.2);
    }
    
    @keyframes pulse {
      0% { transform: scale(1); opacity: 0.3; }
      50% { transform: scale(1.3); opacity: 0.1; }
      100% { transform: scale(1); opacity: 0.3; }
    }
    
    @keyframes dash {
      0% { stroke-dashoffset: 100; }
      70% { stroke-dashoffset: 70; }
      100% { stroke-dashoffset: 70; }
    }
    
    @keyframes dot-fade {
      0%, 100% { opacity: 0.3; transform: scale(1); }
      50% { opacity: 1; transform: scale(1.2); }
    }
    
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
    
    /* Responsive adjustments */
    @media (max-width: 640px) {
      .main-container {
        padding: 24px 16px;
      }
      
      .signin-form {
        padding: 24px;
        border-radius: 12px;
      }
      
      .welcome-container h1 {
        font-size: 28px;
      }
    }
  </style>
</head>
<body>
  <header class="modern-header">
    <div class="logo-container">
      <img src="public/Social - Purple Bg 121418.png" alt="BastionLogo">
      <span class="brand-name">Bastion Auth</span>
    </div>
    <div class="header-actions">
      <button class="back-button" id="backButton">Back</button>
    </div>
  </header>

  <main class="main-container">
    <div class="welcome-container">
      <p class="welcome-subtitle">Authentication</p>
      <h1>Welcome back</h1>
      <p class="welcome-description">Sign in securely using your credentials to access your account and devices.</p>
    </div>

    <!-- Signâ€‘in form wrapper -->
    <div id="signinForm" class="signin-form">
      <div class="form-group" id="usernameContainer">
        <label for="username">Username</label>
        <input type="text" id="username" placeholder="Enter your username">
      </div>

      <button type="button" id="sendButton" class="signin-button">Sign In</button>

      <!-- Link to create account -->
      <p class="create-account-link">
        <a href="#" id="createAccountLink">Don't have a Bastion account? Make one here</a>
      </p>

      <!-- Waitingâ€‘forâ€‘approval screen -->
      <div id="waitingScreen">
        <div class="shield-container">
          <svg class="shield-pulse" viewBox="0 0 24 24">
            <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"></path>
          </svg>
          <svg class="shield" viewBox="0 0 24 24">
            <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"></path>
          </svg>
          <svg class="checkmark" viewBox="0 0 24 24" width="36" height="36">
            <path d="M6 12l4 4L18 6"></path>
          </svg>
        </div>
        <div class="dots">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
        </div>
        <p id="approveText">Waiting for approval</p>
        <p id="appInstructions">Please allow the authentication request in the Bastion Auth mobile app</p>
      </div>

      <div id="statusMessage"></div>
    </div>

    <!-- Createâ€‘Account screen with QR code -->
    <div id="createAccountScreen">
      <h2>Create your Bastion account</h2>
      <p>Download the Bastion Auth mobile app and create your account to get started.</p>
      <img src="public/bastion-auth-qr.png" alt="Download Bastion Auth" class="qr-code">
      <button id="backToSignIn" class="signin-button">Back to Sign In</button>
    </div>
  </main>

  <script>
    const CLIENT_ID = "test_site_1_spa_id";
    const WS_URL    = "ws://192.168.1.213:8443";
    const WS_PROTO  = "echo-protocol";
    let ws = null;
    let transactionId = null;
    let codeVerifier = null;
    let currentState = null;
    let currentUsername = ""; // Store the username
    const ERROR_DISPLAY_TIME = 20000; 

    function generateRandomString(len) {
      const arr = new Uint8Array(len);
      crypto.getRandomValues(arr);
      return Array.from(arr).map(b => ('0' + b.toString(16)).slice(-2)).join('');
    }

    async function generatePKCE() {
      codeVerifier = generateRandomString(64);
      const hashBytes = sha256.arrayBuffer
        ? await sha256.arrayBuffer(codeVerifier)
        : new Uint8Array(sha256.array(codeVerifier)).buffer;
      const b64 = btoa(String.fromCharCode(...new Uint8Array(hashBytes)));
      return b64.replace(/\+/g,'-').replace(/\//g,'_').replace(/=+$/,'');
    }

    function initWS() {
      if (ws && (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING)) return;
      ws = new WebSocket(WS_URL, WS_PROTO);
      ws.binaryType = 'arraybuffer';
      ws.onopen  = () => console.log('WebSocket connected');
      ws.onerror = err => console.error('WebSocket error', err);
      ws.onclose = () => setTimeout(initWS, 3000);
      ws.onmessage = async evt => {
        let text;
        if (evt.data instanceof Blob) text = await evt.data.text();
        else if (evt.data instanceof ArrayBuffer) text = new TextDecoder().decode(evt.data);
        else text = evt.data;

        console.log('WS msg:', text);
        let msg;
        try { msg = JSON.parse(text); } catch { return; }

        if (msg.action === 'signin_started') {
          transactionId = msg.transaction_id;
          currentState  = msg.state;
          showWaitingScreen();
          return;
        }
        if (msg.action === 'og_challenge_code_req') {
          ws.send(JSON.stringify({
            action: 'og_challenge_code_res',
            transaction_id: transactionId,
            code_verifier: codeVerifier,
            client_id: CLIENT_ID,
            username: currentUsername,
            state: currentState
          }));
          return;
        }

        switch (msg.status) {
          case 'invalid':
            resetAll();
            showStatus(msg.error || 'Invalid request. Please try again.', 'error');
            return;
          case 'invalid_char':
            resetAll();
            showStatus(msg.error || 'Invalid characters or username too short.', 'error');
            return;
          case 'db_error':
            resetAll();
            showStatus(msg.error || 'Server error. Please try again later.', 'error');
            return;
          case 'user_no_exist':
            resetAll();
            showStatus(msg.error || 'User does not exist. Please check your username.', 'error');
            return;
          case 'approved':
            showStatus('Authentication successful!', 'success');
            if (window.opener && !window.opener.closed) {
              window.opener.postMessage(
                {
                  type: 'bastion-auth',
                  status: 'approved',
                  username: currentUsername, // Send the username back to parent window
                  transactionId,
                  state: currentState
                },
                window.location.origin
              );
            }

            // Close this popup
            setTimeout(() => window.close(), 300);
            return;
          case 'invalid_spa_id':
            resetAll();
            showStatus(msg.error || 'Server Error, Contact Site Administrator!', 'error');
            return;
          case 'rejected':
            showStatus('Authentication rejected. Please try again.', 'error');
            resetAll();
            return;
          default:
            return;
        }
      };
    }

    async function sendUsernameToServer() {
      const username = document.getElementById('username').value.trim();
      if (!username) { showStatus('Please enter a username', 'error'); return; }
      
      // Store the username
      currentUsername = username;
      
      if (!ws || ws.readyState !== WebSocket.OPEN) { initWS(); setTimeout(sendUsernameToServer, 500); return; }
      const state = generateRandomString(16);
      let challenge;
      try { challenge = await generatePKCE(); }
      catch (e) { showStatus('Crypto error', 'error'); return; }
      ws.send(JSON.stringify({ action: 'start_signin', client_id: CLIENT_ID, username: currentUsername, code_challenge: challenge, code_challenge_method: 'S256', state }));
      console.log('Sent start_signin');
      showWaitingScreen();
    }

    function showWaitingScreen() {
      document.getElementById('usernameContainer').style.display = 'none';
      document.getElementById('sendButton').style.display     = 'none';
      document.getElementById('waitingScreen').style.display  = 'flex';
      document.getElementById('statusMessage').style.display  = 'none';
    }

    function resetAll() {
      if (ws) { ws.close(); ws = null; }
      document.getElementById('usernameContainer').style.display = 'block';
      document.getElementById('sendButton').style.display       = 'block';
      document.getElementById('waitingScreen').style.display    = 'none';
      document.getElementById('statusMessage').style.display    = 'none';
    }

    function showStatus(msg, type) {
      const el = document.getElementById('statusMessage');
      el.textContent = msg;
      el.className   = type === 'error' ? 'status-error' : 'status-success';
      el.style.display = 'block';
      const displayTime = type === 'error' ? ERROR_DISPLAY_TIME : 3000;
      setTimeout(() => el.style.display = 'none', displayTime);
    }

    /* ---------- Navigation between Signâ€‘in and Createâ€‘Account screens ---------- */
    function showCreateAccount() {
      document.getElementById('signinForm').style.display      = 'none';
      document.getElementById('createAccountScreen').style.display = 'flex';
    }

    function backToSignIn() {
      document.getElementById('createAccountScreen').style.display = 'none';
      document.getElementById('signinForm').style.display      = 'block';
      resetAll();
    }

    document.getElementById('createAccountLink').onclick = e => { e.preventDefault(); showCreateAccount(); };
    document.getElementById('backToSignIn').onclick      = backToSignIn;

    document.getElementById('backButton').onclick        = backToSignIn;
    document.getElementById('sendButton').onclick        = sendUsernameToServer;
    document.getElementById('username').addEventListener('keypress', e => { if (e.key === 'Enter') sendUsernameToServer(); });

    window.addEventListener('load', initWS);
  </script>
</body>
</html>